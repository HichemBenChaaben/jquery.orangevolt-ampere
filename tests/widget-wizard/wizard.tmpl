<script id="main" type="text/x-jquery-tmpl">
	<p>
		<div class="description">	
			This wizard guides you to the process of creating a new widget.	
		</div>
		<p>
			{{transition( state.transitions.name)}} to continue.
		</p>
	</p>
</script>

<script id="name" type="text/x-jquery-tmpl">
	<dl>
		{{field({ label : 'Enter widget name:', tooltip:'Widget name is expected be a unique identifier.'})}}
			{{text({name : 'name', required:true})}}	
		{{/field}}
	</dl>	
</script>

<script id="codegen" type="text/x-jquery-tmpl">
	<dl>
		{{field({label:'Generate code'})}}
			{{group}}
				{{radio({label : 'from scratch', name : '$transition', value : 'codegen_fromscratch'})}} 
				{{radio({label : 'from template', name : '$transition', value : 'codegen_fromtemplate', disabled : state.module.existingWidgets.length==0})}}
			{{/group}}	
			<div class="description">	
				Widget sources can be 
				<ul>
					<li>generated from scratch</li>
					<li>or reused from another widget</li>
				</ul>
			</div>
		{{/field}}
	</dl>	
</script>

<script id="codegen_fromscratch" type="text/x-jquery-tmpl">
	<dl>
		{{field({label:'Programming paradigma'})}}
			{{group}}
				{{radio({ name : 'paradigma', value : 'functional'})}}
				{{radio({ name : 'paradigma', value : 'oop'})}}
			{{/group}}
			<div class="description">
				Widgets can be implemented utilizing functional or object oriented
				paradigm.
				<br/> 
				It's more or less a question of personal preferences which one to choose.  
			</div>		
		{{/field}}

		{{field({label:'File Structure'})}}
			{{group}}
				{{radio({ name : 'structure', value : 'multiple', label : 'Spread actions over multiple files', disabled:state.paradigmaEqualsOop})}}	
				{{radio({ name : 'structure', value : 'single', label : 'Collect all actions in one file', disabled:state.paradigmaEqualsOop})}}						
			{{/group}}
			<div class="description">	
				Widgets source code can be spread over multiple files or even kept in a single file.
				<br/>
				Small sized widgets can be put in a single file where as medium/complex widgets are better spread over multiple files.
			</div>	
		{{/field}}
	</dl>			
</script>

<script id="codegen_fromscratch_actions" type="text/x-jquery-tmpl">
	<p>
		Check widget actions you like to support. 
	</p>
	<dl>
		{{field({ tooltip : state.module.options().widgetactions.config.description})}}
			{{checkbox({ name : 'config', label : false})}}
			<label>Widget is configurable.</label>
		{{/field}}
		{{field({ tooltip : state.module.options().widgetactions.preview.description})}}
			{{checkbox({ name : 'preview', label : false})}}
			<label>Is widget preview supported ?</label>
		{{/field}}
		{{field({ tooltip:state.module.options().widgetactions.thumbnail.description})}}
			{{checkbox({ name : 'thumbnail', label:false})}}
			<label>Is the widget able to render a thumbnail of it's state ?</label>
		{{/field}}
		{{field({ tooltip:state.module.options().widgetactions.todo.description})}}
			{{checkbox({ name : 'todo', label:false})}}
			<label>Todo</label>
		{{/field}}
		{{field({ tooltip:state.module.options().widgetactions.notifications.description})}}
			{{checkbox({ name : 'notifications', label:false})}}
			<label>Notifications</label>
		{{/field}}
		{{field({ label:false, tooltip:state.module.options().widgetactions.short_notifications.description})}}
			{{checkbox({ name : 'short_notifications', label:false})}}
			<label>Short notifications support</label>
		{{/field}}
		{{field({ label:false, tooltip:state.module.options().widgetactions.layout.description})}}
			{{checkbox({ name : 'layout', label:false})}}
			<label>Layout</label>
		{{/field}}
		{{field({ label:'Lifecycle support actions', tooltip:state.module.options().widgetactions.create.description + '<br>' +  state.module.options().widgetactions.destroy.description})}}
			{{group}}
				{{checkbox({ name : 'create'})}}
				{{checkbox({ name : 'destroy'})}}
			{{/group}}
		{{/field}}
	</dl>
</script>

<script id="codegen_fromtemplate" type="text/x-jquery-tmpl">
	<p>
		The choosen source code of the template widget will be used 
		to create the widget. 
	</p>
	<dl>	
		{{field({label:'Widgets'})}}
			{{select({ name : 'template', values : state.module.existingWidgets})}}
		{{/field}}
	</dl>
</script>

<script id="preview" type="text/x-jquery-tmpl">
	<p>
		<p>	
			According to the configuration following widget sources would be generated:   
		</p>
		<p>
			{{ready state.generatecode}}
		</p>
	</p>	
</script>

<script id="finish" type="text/x-jquery-tmpl">
	<p>
		If all settings are correct press
		<p> 
			{{transition( state.transitions.finished)}}			
		</p>
		to generate the widget. 
	</p>	
</script>

<script id="finished" type="text/x-jquery-tmpl">
	<p>
		Widget <a href="${state.response.url}" target="_blank">${state.module.states.name.name}</a> successfully created ! 
	</p>	
	<p>
		Open <a href="${state.response.url}" target="_blank">${state.module.states.name.name}</a>.
	</p>
</script>